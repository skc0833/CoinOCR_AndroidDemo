import java.security.MessageDigest

apply plugin: 'com.android.application'

android {
    compileSdkVersion 31

    defaultConfig {
        applicationId "com.skc.coin_ocr"
        minSdkVersion 23
        targetSdkVersion 31
        versionCode 2
        versionName "2.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -frtti -fexceptions -Wno-format"
                arguments '-DANDROID_PLATFORM=android-23', '-DANDROID_STL=c++_shared' ,"-DANDROID_ARM_NEON=TRUE"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    splits {
        abi {
            enable true
            reset()
            include "arm64-v8a", 'armeabi-v7a'
            //include "arm64-v8a"
            //include 'armeabi-v7a'
        }
    }
    // skc fix error: lambda expressions are not supported in -source 1.7
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation project(path: ':opencv')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    def camerax_version = "1.1.0-beta01"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-view:${camerax_version}"
    implementation 'androidx.exifinterface:exifinterface:1.3.2'
}

def archives = [
//        [
                // [skc][230813] 이 압축파일에는 PaddleLite/cxx/libs/arm64-v8a/libpaddle_light_api_shared.so 만 포함돼 있으며
                // armeabi-v7a 이 누락돼 있음
                // 1) 최초에 https://github.com/PaddlePaddle/PaddleOCR/blob/release/2.7/deploy/lite/readme.md 페이지에서
                // Paddle-Lite library download link 중 Android arm7 용 libpaddle_light_api_shared.so 를 다운받아
                // PaddleLite/cxx/libs/armeabi-v7a/ 에 저장하고 빌드시 빌드에러 발생
                // 2) 구글링을 통해 armeabi-v7a 로 적당해 보이는 아래 링크에서 so 파일들을 다운받아 빌드 및 실행시 성공함
                // https://github.com/equationl/paddleocr4android/tree/master/PaddleOCR4Android/PaddleLite/cxx/libs/armeabi-v7a
                // 현재 armeabi-v7a 를 자동으로 스크립트로 처리할 방법을 몰라 일단 소스에 PaddleLite 폴더를 포함시키게 처리함
                //'src' : 'https://paddleocr.bj.bcebos.com/libs/paddle_lite_libs_v2_10.tar.gz',
                //'dest': 'PaddleLite'
//        ],
        [
                'src' : 'https://paddlelite-demo.bj.bcebos.com/libs/android/opencv-4.2.0-android-sdk.tar.gz',
                'dest': 'OpenCV'
        ]
//        [
//                'src' : 'https://paddleocr.bj.bcebos.com/PP-OCRv2/lite/ch_PP-OCRv2.tar.gz',
//                'dest' : 'src/main/assets/models'
//        ],
//        [
//                'src' : 'https://paddleocr.bj.bcebos.com/dygraph_v2.0/lite/ch_dict.tar.gz',
//                'dest' : 'src/main/assets/labels'
//        ]
]

task downloadAndExtractArchives(type: DefaultTask) {
    doFirst {
        println "Downloading and extracting archives including libs and models"
    }
    doLast {
        // Prepare cache folder for archives
        String cachePath = "cache"
        if (!file("${cachePath}").exists()) {
            mkdir "${cachePath}"
        }
        archives.eachWithIndex { archive, index ->
            MessageDigest messageDigest = MessageDigest.getInstance('MD5')
            messageDigest.update(archive.src.bytes)
            String cacheName = new BigInteger(1, messageDigest.digest()).toString(32)
            // Download the target archive if not exists
            boolean copyFiles = !file("${archive.dest}").exists()
            if (!file("${cachePath}/${cacheName}.tar.gz").exists()) {
                ant.get(src: archive.src, dest: file("${cachePath}/${cacheName}.tar.gz"))
                copyFiles = true // force to copy files from the latest archive files
            }
            // Extract the target archive if its dest path does not exists
            if (copyFiles) {
                copy {
                    from tarTree("${cachePath}/${cacheName}.tar.gz")
                    into "${archive.dest}"
                }
            }
        }
    }
}
preBuild.dependsOn downloadAndExtractArchives

//// 현재 cls.nb 모델을 assets/models/ 하위 모든 폴더에 복사했었으나 cls.nb 크기가 429KB 로 작으므로 중복되더라도 미리 탑재시킴
//// skc 공통 모델 파일을 복사해준다(git 용량을 줄이기 위함).
//// app/src/main/ 이 아닌 src/main 경로임에 주의!!!
//String skc_copy_src_model1 = "src/main/assets/models/common/cls.nb"
////String skc_copy_src_model2 = "src/main/assets/models/common/rec_crnn.nb"
//
//// skc_copy_src_model1=D:\research\CoinOCR_AndroidDemo\app\src\main\assets\models\common\cls.nb
//println 'skc_copy_src_model1=' + file({skc_copy_src_model1})
//
//tasks.register('copyModel0', Copy) {
//    //from "${skc_copy_src_model1}", "${skc_copy_src_model2}"
//    from "${skc_copy_src_model1}"
//    into 'src/main/assets/models/ch_PP-OCRv2'
//}
//tasks.register('copyModel1', Copy) {
//    from "${skc_copy_src_model1}"
//    into 'src/main/assets/models/ch_PP-OCRv3_infer'
//}
//tasks.register('copyModel2', Copy) {
//    from "${skc_copy_src_model1}"
//    into 'src/main/assets/models/en_PP-OCRv3_infer'
//}
//tasks.register('copyModel3', Copy) {
//    from "${skc_copy_src_model1}"
//    into 'src/main/assets/models/ch_PP-OCR_V3_add_60x2_230708'
//}
//tasks.register('copyModel4', Copy) {
//    from "${skc_copy_src_model1}"
//    into 'src/main/assets/models/ch_PP-OCR_V3_500_add_500_noflip_rot30'
//}
//preBuild.dependsOn copyModel0, copyModel1, copyModel2, copyModel3, copyModel4
